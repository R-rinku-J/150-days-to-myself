𝐋𝐞𝐞𝐭𝐂𝐨𝐝𝐞 : 𝟐𝟔𝟒𝟏. 𝐂𝐨𝐮𝐬𝐢𝐧𝐬 𝐢𝐧 𝐁𝐢𝐧𝐚𝐫𝐲 𝐓𝐫𝐞𝐞 𝐈𝐈
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def replaceValueInTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        
        level_sum = []

        q = deque([root])
        while q:
            curr_sum = 0
            for i in range(len(q)):
                node = q.popleft()
                curr_sum += node.val
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            level_sum.append(curr_sum)
    
        q = deque([(root, root.val)])
        level = 0
        while q:
            for i in range(len(q)):
                node, val = q.popleft()
                node.val = level_sum[level] - val

                child_sum = 0
                if node.left:
                    child_sum += node.left.val
                if node.right:
                    child_sum += node.right.val
                if node.left:
                    q.append((node.left, child_sum))
                if node.right:
                    q.append((node.right, child_sum))
            level += 1
        return root


𝐂𝐨𝐝𝐞𝐂𝐡𝐞𝐟 : 𝐀𝐥𝐭𝐞𝐫𝐧𝐚𝐭𝐢𝐧𝐠 𝐒𝐭𝐫𝐢𝐧𝐠
# cook your dish here
t=int(input())
for i in range(t):
    N=int(input())
    S=input()
    count_0=S.count('0')
    count_1=S.count('1')
    print(min(count_0,count_1)*2+1 if count_0!=count_1 else min(count_0,count_1)*2)


𝐆𝐞𝐞𝐤𝐬𝐅𝐨𝐫𝐆𝐞𝐞𝐤𝐬 : 𝐅𝐢𝐧𝐝 𝐭𝐡𝐞 𝐒𝐮𝐦 𝐨𝐟 𝐋𝐚𝐬𝐭 𝐍 𝐧𝐨𝐝𝐞𝐬 𝐨𝐟 𝐭𝐡𝐞 𝐋𝐢𝐧𝐤𝐞𝐝 𝐋𝐢𝐬𝐭
#User function Template for python3

'''
# Node Class
class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None
'''
class Solution:
    def sumOfLastN_Nodes(self, head, n):
        #function should return sum of last n nodes
        a = head
        b = head
        
        for _ in range(n):
            a = a.next

        while a:
            a = a.next
            b = b.next
        res = 0

        while b:
            res += b.data
            b = b.next
        return res


𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐁𝐢𝐭 : 𝐀𝐥𝐥𝐨𝐜𝐚𝐭𝐞 𝐁𝐨𝐨𝐤𝐬
class Solution:
    def numberOfStudents(self, A, pages):
        count = 0
        students = 1
        for i in range(len(A)):
            count += A[i]
            if count > pages:
                count = A[i]
                students += 1
        return students

    def books(self, A, M):
        if M > len(A):
            return -1
        min_pages = max(A)
        max_pages = sum(A)
        while(min_pages < max_pages):
            mid = int((min_pages + max_pages) / 2)
            if self.numberOfStudents(A, mid) > M:
                min_pages = mid + 1
            else:
                max_pages = mid
        return min_pages
