𝐋𝐞𝐞𝐭𝐂𝐨𝐝𝐞 : 𝟗𝟔𝟐. 𝐌𝐚𝐱𝐢𝐦𝐮𝐦 𝐖𝐢𝐝𝐭𝐡 𝐑𝐚𝐦𝐩
class Solution:
    def maxWidthRamp(self, A: List[int]) -> int:
        ans = 0
        stack = []
        for i in range(len(A)): 
            if not stack or A[stack[-1]] > A[i]: stack.append(i)
            else: 
                lo, hi = 0, len(stack)
                while lo < hi: 
                    mid = lo + hi >> 1
                    if A[stack[mid]] <= A[i]: hi = mid
                    else: lo = mid + 1
                ans = max(ans, i - stack[lo])
        return ans 


𝐂𝐨𝐝𝐞𝐂𝐡𝐞𝐟 : 𝐑𝐞𝐦𝐨𝐯𝐞 𝐁𝐚𝐝 𝐞𝐥𝐞𝐦𝐞𝐧𝐭𝐬
# cook your dish here
from collections import Counter
for i in range(int(input())):
    n=int(input())
    l=list(map(int,input().split()))
    c=Counter(l)
    for a,b in c.most_common(1):
        m=b
    print(n-m)


𝐆𝐞𝐞𝐤𝐬𝐅𝐨𝐫𝐆𝐞𝐞𝐤𝐬 : 𝐒𝐮𝐛𝐚𝐫𝐫𝐚𝐲 𝐫𝐚𝐧𝐠𝐞 𝐰𝐢𝐭𝐡 𝐠𝐢𝐯𝐞𝐧 𝐬𝐮𝐦
class Solution:
    
    #Complete this fuction
    #Function to count the number of subarrays which adds to the given sum.
    def subArraySum(self,arr, tar):
        #Your code here
        dicti = {0:1}
        count = 0
        curr_sum = 0
        for i in range(len(arr)):
            curr_sum += arr[i]
            if curr_sum - tar in dicti:
                count += dicti[curr_sum - tar]
            dicti[curr_sum] = dicti.get(curr_sum, 0) + 1
        return count


𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐁𝐢𝐭 : 𝐍𝐞𝐚𝐫𝐞𝐬𝐭 𝐒𝐦𝐚𝐥𝐥𝐞𝐫 𝐄𝐥𝐞𝐦𝐞𝐧𝐭
class Solution:
	# @param A : list of integers
	# @return a list of integers
	def prevSmaller(self, A):
        s = list()
        res = []
        
        for i in range(len(A)):
            while (len(s) > 0 and s[-1] >= A[i]):
                s.pop()
            
            if (len(s) == 0):
                res.append(-1)
            else:
                res.append(s[-1])
            s.append(A[i])
        return res
        
