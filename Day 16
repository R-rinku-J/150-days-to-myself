𝐋𝐞𝐞𝐭𝐂𝐨𝐝𝐞 : 𝟔𝟒𝟏. 𝐃𝐞𝐬𝐢𝐠𝐧 𝐂𝐢𝐫𝐜𝐮𝐥𝐚𝐫 𝐃𝐞𝐪𝐮𝐞
class MyCircularDeque:

    def __init__(self, k: int):
        self.queue = [None] * k
        self.max_size = k
        self.head = 0
        self.tail = 0
        self.size = 0

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        self.head = (self.head - 1) % self.max_size
        self.queue[self.head] = value
        self.size += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        self.queue[self.tail] = value
        self.tail = (self.tail + 1) % self.max_size
        self.size += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        self.head = (self.head + 1) % self.max_size
        self.size -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False
        self.tail = (self.tail - 1) % self.max_size
        self.size -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.queue[self.head]

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.queue[(self.tail - 1) % self.max_size]

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.max_size


# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()


𝐂𝐨𝐝𝐞𝐂𝐡𝐞𝐟 : 𝐄𝐧𝐝 𝐒𝐨𝐫𝐭𝐞𝐝
# cook your dish here
for _ in range(int(input())):
    n = int(input())
    p = list(map(int,input().split()))
    loc1 = p.index(1)
    locn = p.index(n)
    print(n - 1 - locn + loc1 - int(loc1>locn))


𝐆𝐞𝐞𝐤𝐬𝐅𝐨𝐫𝐆𝐞𝐞𝐤𝐬 : 𝐌𝐢𝐧𝐢𝐦𝐚𝐥 𝐂𝐨𝐬𝐭
class Solution:
    def minimizeCost(self, k, arr):
        # code here
        n = len(arr)
        dp = [float('inf')] * n
        dp[0] = 0
        
        for r in range(1, n):
            for l in range(max(0, r-k), r):
                dp[r] = min(dp[r], dp[l] + abs(arr[r] - arr[l]))
        return dp[n-1]


𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐁𝐢𝐭 : 𝐌𝐚𝐱𝐢𝐦𝐮𝐦 𝐎𝐧𝐞𝐬 𝐀𝐟𝐭𝐞𝐫 𝐌𝐨𝐝𝐢𝐟𝐢𝐜𝐚𝐭𝐢𝐨𝐧
class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        l=0
        r=0
        z=0
        res=0
        while r<len(A):
            if A[r]==0:
                z+=1
            if z<=B:
                res=max(res,r-l+1)
            elif z>B:
                if A[l]==0:
                    z-=1
                l+=1
            r+=1
        return res
